import telegram
from telegram.ext import CallbackContext

from config import ADMIN_IDS, Session
from datetime import timezone, timedelta
import logging
from models import User
from telegram import (
    Update, ReplyKeyboardRemove, InlineKeyboardButton,InlineKeyboardMarkup
)

MOSCOW_TZ = timezone(timedelta(hours=3))  # UTC+3

def is_admin(user_id):
    return user_id in ADMIN_IDS

def format_datetime(dt):
    if not dt:
        return "‚Äî"
    try:
        if dt.tzinfo is None:
            logging.debug("Datetime –Ω–∞–∏–≤–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º UTC")
            dt = dt.replace(tzinfo=timezone.utc)
        else:
            logging.debug(f"Datetime —É–∂–µ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π: {dt.tzinfo}")

        localized_dt = dt.astimezone(MOSCOW_TZ)
        return localized_dt.strftime("%d.%m.%Y %H:%M")
    except Exception as e:
        return f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞: {e}"

def get_all_user_ids():
    with Session() as session:
        return [user_id for (user_id,) in session.query(User.telegram_id).all()]


async def show_registration_error(update: Update, message: str):
    try:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.delete()
        elif update.message:
            await update.message.delete()
    except Exception:
        pass

    await update.effective_chat.send_message(
        text=message + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=ReplyKeyboardRemove()
    )

def main_menu_keyboard(user_id):
    buttons = []

    # –ë–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons.append([InlineKeyboardButton("‚†Ä", callback_data="ignore_gap")])
    buttons.append([InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é:", callback_data="ignore_user_menu")])
    buttons.append([InlineKeyboardButton("üîç –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="list")])
    buttons.append([InlineKeyboardButton("üì¶ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my")])
    buttons.append([InlineKeyboardButton("üì• –í–∑—è—Ç—å –≤ –∞—Ä–µ–Ω–¥—É", callback_data="rent_start")])
    buttons.append([InlineKeyboardButton("üì§ –í–µ—Ä–Ω—É—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="return")])
    buttons.append([InlineKeyboardButton("üë§ –ö—Ç–æ —è", callback_data="whoami")])


    # –ë–ª–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –∞–¥–º–∏–Ω)
    if is_admin(user_id):
        buttons.append([InlineKeyboardButton("‚†Ä", callback_data="ignore_gap")])
        buttons.append([InlineKeyboardButton("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", callback_data="ignore_admin_panel")])
        buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_add_start")])
        buttons.append([InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_edit_start")])
        buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_delete_start")])
        buttons.append([InlineKeyboardButton("üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_all_users")])
        buttons.append([InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_pending_users")])
        buttons.append([InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast_start")])
        buttons.append([InlineKeyboardButton("‚†Ä", callback_data="ignore_gap")])

    return InlineKeyboardMarkup(buttons)

async def show_main_menu(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    try:
        if update.callback_query:
            await update.callback_query.message.delete()
        elif update.message:
            await update.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await context.bot.send_message(
        chat_id=user_id,
        text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard(user_id)
    )