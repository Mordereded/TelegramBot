from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import CallbackContext, CallbackQueryHandler, MessageHandler, ConversationHandler, CommandHandler, filters
from utils import get_all_user_ids, show_registration_error, is_admin, main_menu_keyboard
from config import Session
from models import User
from States import ADMIN_BROADCAST_MESSAGE


async def check_user_is_approved_and_admin(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    user_obj = session.query(User).filter_by(telegram_id=user_id).first()
    session.close()

    if not user_obj:
        await show_registration_error(update, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return False

    if not user_obj.is_approved:
        await show_registration_error(update, "‚è≥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º.")
        return False

    if not is_admin(user_id):
        await show_registration_error(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return False

    return True


async def admin_broadcast_start(update: Update, context: CallbackContext):
    allowed = await check_user_is_approved_and_admin(update, context)
    if not allowed:
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    try:
        await query.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await query.message.chat.send_message(
        text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_BROADCAST_MESSAGE


async def admin_broadcast_cancel_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=user_id,
        text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard(user_id)
    )

    return ConversationHandler.END


async def admin_broadcast_send(update: Update, context: CallbackContext):
    message_text = update.message.text
    admin_id = update.effective_user.id
    user_ids = [uid for uid in get_all_user_ids() if uid != admin_id]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await update.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

    count = 0
    for user_id in user_ids:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ö†Ô∏è *–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:*\n\n{message_text}",
                parse_mode="Markdown"
            )
            count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=admin_id,
        text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard(admin_id)
    )

    return ConversationHandler.END


broadcast_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(admin_broadcast_start, pattern="^admin_broadcast_start$")
    ],
    states={
        ADMIN_BROADCAST_MESSAGE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_send),
            CallbackQueryHandler(admin_broadcast_cancel_callback, pattern="^cancel_broadcast$")
        ],
    },
    fallbacks=[
        CommandHandler("cancel", admin_broadcast_cancel_callback)
    ],
    allow_reentry=True
)