import os
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)

from telegram.ext import (
    Application, CommandHandler, CallbackContext,
    ConversationHandler, MessageHandler, filters,
    CallbackQueryHandler
)
from telegram import ReplyKeyboardRemove
from sqlalchemy import Column, Integer, String, DateTime, Boolean, create_engine, BigInteger
from sqlalchemy.orm import declarative_base, sessionmaker
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta, timezone
import logging
import sys


from flask import Flask, Response
import threading

flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return Response("OK", status=200)

def run_flask():
    port = int(os.environ.get("PORT", 8000))
    flask_app.run(host="0.0.0.0", port=port)


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    print("–û—à–∏–±–∫–∞: –≤ —Ñ–∞–π–ª–µ .env –Ω–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")
    sys.exit(1)

ADMIN_IDS = set()
if os.getenv("ADMIN_IDS"):
    ADMIN_IDS = set(map(int, filter(None, os.getenv("ADMIN_IDS").split(","))))

Base = declarative_base()
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
scheduler = BackgroundScheduler()
scheduler.start()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# --- –ú–æ–¥–µ–ª–∏ ---
class Account(Base):
    __tablename__ = 'accounts'
    id = Column(BigInteger, primary_key=True)
    login = Column(String)
    password = Column(String)
    behavior = Column(Integer)
    mmr = Column(Integer)
    calibration = Column(Boolean,default=False)
    status = Column(String)  # free or rented
    rented_at = Column(DateTime, nullable=True)
    renter_id = Column(Integer, nullable=True)
    rent_duration = Column(Integer, nullable=True)

class User(Base):
    __tablename__ = 'users'
    telegram_id = Column(BigInteger, primary_key=True)
    username = Column(String, nullable=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    is_approved = Column(Boolean, default=False)
    registered_at = Column(DateTime, default=datetime.now(timezone.utc))

Base.metadata.create_all(engine)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
(ADMIN_ADD_LOGIN, ADMIN_ADD_PASSWORD, ADMIN_ADD_MMR,ADMIN_ADD_CALIBRATION,
 ADMIN_EDIT_CHOOSE_ID, ADMIN_EDIT_CHOOSE_FIELD, ADMIN_EDIT_NEW_VALUE,
 USER_RENT_SELECT_ACCOUNT, USER_RENT_SELECT_DURATION,
 ADMIN_DELETE_CHOOSE_ID,ADMIN_ADD_BEHAVIOR) = range(11)
(
    RETURN_CONFIRM_UPDATE,
    RETURN_SELECT_FIELDS,
    RETURN_INPUT_MMR,
    RETURN_INPUT_BEHAVIOR
) = range(200, 204)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_admin(user_id):
    return user_id in ADMIN_IDS


MOSCOW_TZ = timezone(timedelta(hours=3))  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è UTC+3
def format_datetime(dt):
    if not dt:
        return "‚Äî"
    try:
        # –ï—Å–ª–∏ datetime –Ω–∞–∏–≤–Ω—ã–π ‚Äî —Å—á–∏—Ç–∞–µ–º –µ–≥–æ UTC
        if dt.tzinfo is None:
            logging.debug("Datetime –Ω–∞–∏–≤–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º UTC")
            dt = dt.replace(tzinfo=timezone.utc)
        else:
            logging.debug(f"Datetime —É–∂–µ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π: {dt.tzinfo}")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫—É—é –∑–æ–Ω—É
        localized_dt = dt.astimezone(MOSCOW_TZ)
        formatted = localized_dt.strftime("%d.%m.%Y %H:%M")
        return formatted
    except Exception as e:

        return f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞: {e}"


async def show_registration_error(update: Update, message: str):
    try:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.delete()
        elif update.message:
            await update.message.delete()
    except Exception:
        pass

    await update.effective_chat.send_message(
        text=message + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=ReplyKeyboardRemove()
    )

def format_duration(minutes: int) -> str:
    hours = minutes // 60
    mins = minutes % 60
    parts = []
    if hours > 0:
        parts.append(f"{hours} —á")
    if mins > 0:
        parts.append(f"{mins} –º–∏–Ω")
    return " ".join(parts) if parts else "0 –º–∏–Ω"

def main_menu_keyboard(user_id):
    buttons = []

    # –ë–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons.append([InlineKeyboardButton("‚†Ä", callback_data="ignore_gap")])
    buttons.append([InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é:", callback_data="ignore_user_menu")])
    buttons.append([InlineKeyboardButton("üîç –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="list")])
    buttons.append([InlineKeyboardButton("üì¶ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my")])
    buttons.append([InlineKeyboardButton("üì• –í–∑—è—Ç—å –≤ –∞—Ä–µ–Ω–¥—É", callback_data="rent_start")])
    buttons.append([InlineKeyboardButton("üì§ –í–µ—Ä–Ω—É—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="return")])
    buttons.append([InlineKeyboardButton("üë§ –ö—Ç–æ —è", callback_data="whoami")])


    # –ë–ª–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –∞–¥–º–∏–Ω)
    if is_admin(user_id):
        buttons.append([InlineKeyboardButton("‚†Ä", callback_data="ignore_gap")])
        buttons.append([InlineKeyboardButton("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", callback_data="ignore_admin_panel")])
        buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_add_start")])
        buttons.append([InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_edit_start")])
        buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_delete_start")])
        buttons.append([InlineKeyboardButton("üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_all_users")])
        buttons.append([InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_pending_users")])
        buttons.append([InlineKeyboardButton("‚†Ä", callback_data="ignore_gap")])

    return InlineKeyboardMarkup(buttons)

async def notify_admins_new_user(session, new_user: User, app: Application):
    for admin_id in ADMIN_IDS:
        buttons = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_user_{new_user.telegram_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_user_{new_user.telegram_id}"),
            ],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö", callback_data="show_pending_users")]
        ]
        text = (
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n"
            f"ID: {new_user.telegram_id}\n"
            f"Username: @{new_user.username if new_user.username else '(–Ω–µ—Ç)'}\n"
            f"–ò–º—è: {new_user.first_name or '(–Ω–µ—Ç)'} {new_user.last_name or ''}\n"
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {format_datetime(new_user.registered_at)}"
        )
        try:
            await app.bot.send_message(admin_id, text, reply_markup=InlineKeyboardMarkup(buttons))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    session = Session()
    try:
        existing_user = session.query(User).filter_by(telegram_id=user_id).first()

        if existing_user:
            if existing_user.is_approved:
                role = "–ê–¥–º–∏–Ω" if is_admin(user_id) else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                await update.message.reply_text(
                    f"–ü—Ä–∏–≤–µ—Ç, {role}! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç—ã —Å Dota 2 MMR.",
                    reply_markup=main_menu_keyboard(user_id)
                )
            else:
                await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        else:
            is_approved = is_admin(user_id)
            new_user = User(
                telegram_id=user_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                is_approved=is_approved,
                registered_at=datetime.now(timezone.utc)
            )
            session.add(new_user)
            session.commit()

            if is_approved:
                await update.message.reply_text(
                    "–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç—ã —Å Dota 2 MMR.",
                    reply_markup=main_menu_keyboard(user_id)
                )
            else:
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                )
                await notify_admins_new_user(session, new_user, context.application)
    finally:
        session.close()

async def list_accounts(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    try:
        user_obj = session.query(User).filter_by(telegram_id=user_id).first()
        if not user_obj:
            return await show_registration_error(update, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        if not user_obj.is_approved:
            return await show_registration_error(update, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º.")

        accounts = session.query(Account).all()
        text = ""

        if is_admin(user_id):
            for acc in accounts:
                rent_info = ""
                if acc.status == "rented" and acc.rented_at and acc.rent_duration:
                    rent_end = acc.rented_at + timedelta(minutes=acc.rent_duration)
                    duration_str = format_duration(acc.rent_duration)
                    rent_info = (
                        f"–í–∑—è—Ç–æ: {format_datetime(acc.rented_at)}\n"
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
                        f"–í–µ—Ä–Ω—É—Ç—å –¥–æ: {format_datetime(rent_end)}\n"
                        f"–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä Telegram ID: {acc.renter_id or '‚Äî'}\n"
                    )
                calibrated_str = "–î–∞" if acc.calibration else "–ù–µ—Ç"
                text += (
                    f"ID: {acc.id}\n"
                    f"–û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω: {calibrated_str}\n"
                    f"MMR: {acc.mmr}\n"
                    f"Behavior: {acc.behavior or '‚Äî'}\n"
                    f"–°—Ç–∞—Ç—É—Å: {acc.status}\n"
                    f"–õ–æ–≥–∏–Ω: {acc.login}\n"
                    f"–ü–∞—Ä–æ–ª—å: {acc.password}\n"
                    f"{rent_info}\n"
                )
        else:
            for acc in accounts:
                status = "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if acc.status == "free" else "‚õî –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω"
                calibrated_str = "–î–∞" if acc.calibration else "–ù–µ—Ç"
                text += (
                    f"ID: {acc.id}\n"
                    f"MMR: {acc.mmr}\n"
                    f"Behavior: {acc.behavior or '‚Äî'}\n"
                    f"–û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω: {calibrated_str}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
                )

        if not text:
            text = "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤."

        if update.message:
            await update.message.reply_text(text, reply_markup=main_menu_keyboard(user_id))
        elif update.callback_query:
            current_text = update.callback_query.message.text or ""
            current_markup = update.callback_query.message.reply_markup
            new_markup = main_menu_keyboard(user_id)

            def markup_equals(m1, m2):
                if m1 is None and m2 is None:
                    return True
                if m1 is None or m2 is None:
                    return False
                # –°—Ä–∞–≤–Ω–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É inline_keyboard (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫)
                kb1 = getattr(m1, 'inline_keyboard', None)
                kb2 = getattr(m2, 'inline_keyboard', None)
                return kb1 == kb2

            if current_text == text and markup_equals(current_markup, new_markup):
                await update.callback_query.answer()  # –ø—Ä–æ—Å—Ç–æ "–ø–æ–≥–∞—Å–∏—Ç—å" —Å–ø–∏–Ω–Ω–µ—Ä
                return
            else:
                await update.callback_query.edit_message_text(text, reply_markup=new_markup)
    finally:
        session.close()




async def my(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    try:
        user_obj = session.query(User).filter_by(telegram_id=user_id).first()

        if not user_obj:
            return await show_registration_error(update, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        if not user_obj.is_approved:
            return await show_registration_error(update, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º.")

        accounts = session.query(Account).filter_by(renter_id=user_id, status="rented").all()
        if accounts:
            text = "–í–∞—à–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
            for acc in accounts:
                rent_end = acc.rented_at + timedelta(minutes=acc.rent_duration) if acc.rented_at and acc.rent_duration else None
                duration_str = format_duration(acc.rent_duration) if acc.rent_duration else "‚Äî"
                calibrated_str = "–î–∞" if acc.calibration else "–ù–µ—Ç"
                text += (
                    f"ID: {acc.id}\n"
                    f"–û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω: {calibrated_str}\n"
                    f"MMR: {acc.mmr}\n"
                    f"Behavior: {acc.behavior or '‚Äî'}\n"
                    f"–°—Ç–∞—Ç—É—Å: –∞—Ä–µ–Ω–¥–∞\n"
                    f"–õ–æ–≥–∏–Ω: {acc.login}\n–ü–∞—Ä–æ–ª—å: {acc.password}\n"
                    f"–í–∑—è—Ç–æ: {format_datetime(acc.rented_at)}\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
                    f"–í–µ—Ä–Ω—É—Ç—å –¥–æ: {format_datetime(rent_end)}\n\n"
                )
                if user_id in ADMIN_IDS:
                    text += f"–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä Telegram ID: {acc.renter_id}\n\n"
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."

        if update.message:
            await update.message.reply_text(text, reply_markup=main_menu_keyboard(user_id))
        elif update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(user_id))
    finally:
        session.close()




async def whoami(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    try:
        user_obj = session.query(User).filter_by(telegram_id=user_id).first()

        if not user_obj:
            return await show_registration_error(update, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        if not user_obj.is_approved:
            return await show_registration_error(update, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º.")

        role = "–ê–¥–º–∏–Ω" if is_admin(user_id) else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text = (
            f"ID: {user_obj.telegram_id}\n"
            f"Username: @{user_obj.username or '(–Ω–µ—Ç)'}\n"
            f"–ò–º—è: {user_obj.first_name or '(–Ω–µ—Ç)'} {user_obj.last_name or ''}\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º: –î–∞\n"
            f"–†–æ–ª—å: {role}"
        )

        if update.message:
            await update.message.reply_text(text, reply_markup=main_menu_keyboard(user_id))
        elif update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(user_id))
    finally:
        session.close()




# --- –ê—Ä–µ–Ω–¥–∞: —Å—Ç–∞—Ä—Ç –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
async def rent_start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    try:
        user_obj = session.query(User).filter_by(telegram_id=user_id).first()

        if not user_obj:
            await show_registration_error(update, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return ConversationHandler.END

        if not user_obj.is_approved:
            await show_registration_error(update, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º.")
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        already_rented = session.query(Account).filter_by(renter_id=user_id, status="rented").first()
        if already_rented:
            text = f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ID {already_rented.id}. –°–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ."
            if update.callback_query:
                await update.callback_query.answer(text, show_alert=True)
                # –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏ –∞—Ä–µ–Ω–¥—ã:
                await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(user_id))
            else:
                await update.message.reply_text(text, reply_markup=main_menu_keyboard(user_id))
            return ConversationHandler.END

        free_accs = session.query(Account).filter_by(status="free").all()
        if not free_accs:
            if update.callback_query:
                await update.callback_query.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç.", show_alert=True)
            return ConversationHandler.END

        buttons = [

            [InlineKeyboardButton(f"MMR: {acc.mmr} –û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω: {'–î–∞' if acc.calibration == 1 else '–ù–µ—Ç'} –ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å: {acc.behavior}", callback_data=f"rent_acc_{acc.id}")]
            for acc in free_accs

        ]
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã ‚Äî callback_data "cancel_rent", —á—Ç–æ–±—ã –ª–æ–≤–∏–ª–∞—Å—å fallbacks
        buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_rent")])

        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã:", reply_markup=InlineKeyboardMarkup(buttons)
            )
        return USER_RENT_SELECT_ACCOUNT
    finally:
        session.close()

async def cancel_rent(update: Update, context: CallbackContext):
    query = update.callback_query
    if query:
        await query.answer()
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–µ –¥–µ–ª–∞—è –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard(query.from_user.id))
    elif update.message:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard(update.effective_user.id))
    context.user_data.clear()
    return ConversationHandler.END



# --- –ê—Ä–µ–Ω–¥–∞: –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ ---
async def rent_select_account(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    await query.answer()
    if not data.startswith("rent_acc_"):
        return USER_RENT_SELECT_ACCOUNT
    acc_id = int(data.split("_")[-1])
    context.user_data['rent_acc_id'] = acc_id
    buttons = [
        [InlineKeyboardButton("60 –º–∏–Ω—É—Ç", callback_data="rent_dur_60")],
        [InlineKeyboardButton("120 –º–∏–Ω—É—Ç", callback_data="rent_dur_120")],
        [InlineKeyboardButton("3 —á–∞—Å–∞", callback_data="rent_dur_180")],
        [InlineKeyboardButton("6 —á–∞—Å–æ–≤", callback_data="rent_dur_360")],
        [InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data="rent_dur_720")],
        [InlineKeyboardButton("24 —á–∞—Å–∞", callback_data="rent_dur_1440")],
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã:", reply_markup=InlineKeyboardMarkup(buttons))
    return USER_RENT_SELECT_DURATION

# --- –ê—Ä–µ–Ω–¥–∞: –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
async def rent_select_duration(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    if not data.startswith("rent_dur_"):
        await query.answer()
        return USER_RENT_SELECT_DURATION
    duration = int(data.split("_")[-1])
    acc_id = context.user_data.get('rent_acc_id')
    user_id = query.from_user.id
    session = Session()
    try:
        acc = session.query(Account).filter_by(id=acc_id).first()
        if not acc or acc.status != "free":
            await query.answer("–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω.", show_alert=True)
            return ConversationHandler.END
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞—Ä–µ–Ω–¥—ã
        already_rented = session.query(Account).filter_by(renter_id=user_id, status="rented").first()
        if already_rented:
            await query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç. –°–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ.", show_alert=True)
            return ConversationHandler.END
        acc.status = "rented"
        acc.renter_id = user_id
        acc.rented_at = datetime.now(timezone.utc)
        acc.rent_duration = duration
        session.commit()
        await query.edit_message_text(
            f"–ê–∫–∫–∞—É–Ω—Ç ID {acc.id} —É—Å–ø–µ—à–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –Ω–∞ {format_duration(duration)}.",
            reply_markup=main_menu_keyboard(user_id)
        )
        logging.info(f"User {user_id} rented account {acc.id} for {duration} minutes.")
    finally:
        session.close()
    return ConversationHandler.END


# --- –í–æ–∑–≤—Ä–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ---
async def return_account(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user or not user.is_approved:
            return await show_registration_error(update, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.")

        acc = session.query(Account).filter_by(renter_id=user_id, status="rented").first()
        if not acc:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
            return ConversationHandler.END

        context.user_data["return_acc_id"] = acc.id

        buttons = [
            [InlineKeyboardButton("–î–∞", callback_data="return_update_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="return_update_no")]
        ]
        await update.callback_query.edit_message_text(
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å MMR –∏–ª–∏ Behavior –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º?",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return RETURN_CONFIRM_UPDATE
    finally:
        session.close()

async def return_confirm_handler(update: Update, context: CallbackContext):
    if update.callback_query.data == "return_update_yes":
        buttons = [
            [InlineKeyboardButton("MMR", callback_data="update_mmr")],
            [InlineKeyboardButton("Behavior", callback_data="update_behavior")],
            [InlineKeyboardButton("–û–±–∞", callback_data="update_both")]
        ]
        await update.callback_query.edit_message_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return RETURN_SELECT_FIELDS
    else:
        return await finalize_return(update, context)  # –æ–±—ã—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def return_input_mmr(update: Update, context: CallbackContext):
    mmr = update.message.text.strip()
    if not mmr.isdigit():
        await update.message.reply_text("MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:")
        return RETURN_INPUT_MMR
    context.user_data["new_mmr"] = int(mmr)

    if context.user_data["update_choice"] == "update_both":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Behavior:")
        return RETURN_INPUT_BEHAVIOR
    else:
        return await finalize_return(update, context)

async def return_input_behavior(update: Update, context: CallbackContext):
    behavior = update.message.text.strip()
    if not behavior.isdigit():
        await update.message.reply_text("Behavior –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:")
        return RETURN_INPUT_BEHAVIOR
    context.user_data["new_behavior"] = int(behavior)
    return await finalize_return(update, context)

async def finalize_return(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    try:
        acc = session.query(Account).get(context.user_data["return_acc_id"])
        acc.status = "free"
        acc.renter_id = None
        acc.rented_at = None
        acc.rent_duration = None

        if "new_mmr" in context.user_data:
            acc.mmr = context.user_data["new_mmr"]
        if "new_behavior" in context.user_data:
            acc.behavior = context.user_data["new_behavior"]

        session.commit()

        text = f"–ê–∫–∫–∞—É–Ω—Ç ID {acc.id} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â—ë–Ω!"
        if update.message:
            await update.message.reply_text(text, reply_markup=main_menu_keyboard(user_id))
        else:
            await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(user_id))
    finally:
        session.close()
        context.user_data.clear()
    return ConversationHandler.END


async def return_select_fields(update: Update, context: CallbackContext):
    data = update.callback_query.data
    context.user_data["update_choice"] = data
    if data == "update_mmr":
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π MMR:")
        return RETURN_INPUT_MMR
    elif data == "update_behavior":
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Behavior:")
        return RETURN_INPUT_BEHAVIOR
    elif data == "update_both":
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π MMR:")
        return RETURN_INPUT_MMR



# --- –ê–¥–º–∏–Ω: –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
async def show_pending_users_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    session = Session()
    try:
        pending_users = session.query(User).filter_by(is_approved=False).all()
        if not pending_users:
            text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(user_id))
            return
        text = "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        buttons = []
        for u in pending_users:
            uname = f"@{u.username}" if u.username else "(–Ω–µ—Ç username)"
            text += f"ID: {u.telegram_id} {uname}\n"
            buttons.append([
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_user_{u.telegram_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_user_{u.telegram_id}"),
            ])
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
    finally:
        session.close()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ ---
async def admin_approve_reject_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if not is_admin(user_id):
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    session = Session()
    try:
        # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        if data.startswith("approve_user_"):
            target_id = int(data.split("_")[-1])
            user = session.query(User).filter_by(telegram_id=target_id).first()
            if user:
                if user.is_approved:
                    await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", show_alert=True)
                    return

                user.is_approved = True
                session.commit()
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")

                try:
                    await context.application.bot.send_message(
                        target_id,
                        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                        reply_markup=main_menu_keyboard(target_id)
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {e}")

            else:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        # --- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        elif data.startswith("reject_user_"):
            target_id = int(data.split("_")[-1])
            user = session.query(User).filter_by(telegram_id=target_id).first()
            if user:
                if is_admin(target_id):
                    await query.answer("–ù–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
                    return
                user.is_approved = False
                session.commit()
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω")
                # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.application.bot.send_message(
                        target_id,
                        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {e}")

            else:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        # --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        elif data.startswith("delete_user_"):
            target_id = int(data.split("_")[-1])

            if target_id == user_id:
                await query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", show_alert=True)
                return

            if is_admin(target_id):
                await query.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
                return

            user = session.query(User).filter_by(telegram_id=target_id).first()
            if user:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—É–ª
                rented_accs = session.query(Account).filter_by(renter_id=target_id, status="rented").all()
                for acc in rented_accs:
                    acc.status = "free"
                    acc.renter_id = None
                    acc.rented_at = None
                    acc.rent_duration = None

                session.delete(user)
                session.commit()
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ø—É–ª.")
            else:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        # --- –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
        elif data == "show_pending_users":
            await show_pending_users_handler(update, context)
            return

        # --- –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
        elif data == "show_all_users":
            await show_all_users_handler(update, context)
            return

        # --- –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
        elif data == "admin_back":
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard(user_id))
            return

        # --- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
        elif data == "list":
            await list_accounts(update, context)
            return

        else:
            await query.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_approve_reject_handler: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    finally:
        session.close()

    # –ü–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if data.startswith(("approve_user_", "reject_user_", "delete_user_")):
        await show_pending_users_handler(update, context)


# --- –ê–¥–º–∏–Ω: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
async def show_all_users_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    session = Session()
    try:
        users = session.query(User).all()
        if not users:
            text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç."
            await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(user_id))
            return

        text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        buttons = []
        for u in users:
            uname = f"@{u.username}" if u.username else "(–Ω–µ—Ç username)"
            approved = "‚úÖ" if u.is_approved else "‚ùå"
            text += f"ID: {u.telegram_id} {uname} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {approved}\n"
            buttons.append([
                InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {u.telegram_id}", callback_data=f"delete_user_{u.telegram_id}")
            ])
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])

        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
    finally:
        session.close()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (ConversationHandler) ---
async def admin_add_start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return ConversationHandler.END
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
    return ADMIN_ADD_LOGIN

async def admin_add_login_handler(update: Update, context: CallbackContext):
    context.user_data['new_login'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞:")
    return ADMIN_ADD_PASSWORD

async def admin_add_password_handler(update: Update, context: CallbackContext):
    context.user_data['new_password'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ Behavior –∞–∫–∫–∞—É–Ω—Ç–∞ (—á–∏—Å–ª–æ):")
    return ADMIN_ADD_BEHAVIOR

async def admin_add_behavior_handler(update: Update, context: CallbackContext):
    behavior_text = update.message.text.strip()
    if not behavior_text.isdigit():
        await update.message.reply_text("Behavior –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ADMIN_ADD_BEHAVIOR

    context.user_data['new_behavior'] = int(behavior_text)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="calibration_yes"),
         InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="calibration_no")]
    ])

    await update.message.reply_text("–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω?", reply_markup=keyboard)
    return ADMIN_ADD_CALIBRATION

async def admin_add_calibration_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "calibration_yes":
        context.user_data['new_calibration'] = True
    elif query.data == "calibration_no":
        context.user_data['new_calibration'] = False
    else:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ADMIN_ADD_CALIBRATION

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ MMR –∞–∫–∫–∞—É–Ω—Ç–∞ (—á–∏—Å–ª–æ):")
    return ADMIN_ADD_MMR

async def admin_add_mmr_handler(update: Update, context: CallbackContext):
    mmr_text = update.message.text.strip()
    if not mmr_text.isdigit():
        await update.message.reply_text("MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ADMIN_ADD_MMR
    mmr = int(mmr_text)
    session = Session()
    try:
        new_acc = Account(
            login=context.user_data['new_login'],
            password=context.user_data['new_password'],
            behavior=context.user_data['new_behavior'],
            mmr=mmr,
            calibration= context.user_data['new_calibration'],
            status="free",
            rented_at=None,
            renter_id=None,
            rent_duration=None
        )
        session.add(new_acc)
        session.commit()
        await update.message.reply_text(
            f"–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\nID {new_acc.id}, MMR {new_acc.mmr}",
            reply_markup=main_menu_keyboard(update.effective_user.id)
        )
    finally:
        session.close()
    return ConversationHandler.END

async def admin_add_cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard(update.effective_user.id))
    return ConversationHandler.END

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (ConversationHandler) ---
async def admin_edit_start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return ConversationHandler.END
    session = Session()
    try:
        accounts = session.query(Account).all()
        buttons = []
        for acc in accounts:
            buttons.append([InlineKeyboardButton(f"ID: {acc.id}\n Login: {acc.login}\n MMR: {acc.mmr}\n –°—Ç–∞—Ç—É—Å: {acc.status}", callback_data=f"edit_acc_{acc.id}")])
        buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_back")])
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(buttons))
    finally:
        session.close()
    return ADMIN_EDIT_CHOOSE_ID

async def admin_edit_choose_id(update: Update, context: CallbackContext):
    logging.info(">>> –í—ã–∑–≤–∞–Ω admin_edit_choose_id")
    query = update.callback_query
    data = query.data
    acc_id = int(data.split("_")[-1])
    context.user_data['edit_acc_id'] = acc_id

    buttons = [
        [InlineKeyboardButton("–õ–æ–≥–∏–Ω", callback_data="edit_field_login")],
        [InlineKeyboardButton("–ü–∞—Ä–æ–ª—å", callback_data="edit_field_password")],
        [InlineKeyboardButton("MMR", callback_data="edit_field_mmr")],
        [InlineKeyboardButton("Behavior", callback_data="edit_field_behavior")],
        [InlineKeyboardButton("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", callback_data="edit_field_calibration")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(buttons))
    return ADMIN_EDIT_CHOOSE_FIELD

async def admin_edit_choose_field(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    field = data.replace("edit_field_", "")
    context.user_data['edit_field'] = field
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {get_field_display_name(field)}:")
    return ADMIN_EDIT_NEW_VALUE

def get_field_display_name(field_name: str) -> str:
    field_map = {
        "id": "ID",
        "login": "–õ–æ–≥–∏–Ω",
        "password": "–ü–∞—Ä–æ–ª—å",
        "mmr": "MMR",
        "behavior": "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
        "status": "–°—Ç–∞—Ç—É—Å",
        "rented_at": "–í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã",
        "renter_id": "ID –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞",
        "rent_duration": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (–º–∏–Ω)",
        "calibration": "–û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω",
        "telegram_id": "Telegram ID",
        "username": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "first_name": "–ò–º—è",
        "last_name": "–§–∞–º–∏–ª–∏—è",
        "is_approved": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
        "registered_at": "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
    }
    return field_map.get(field_name, field_name)

async def admin_edit_new_value(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    value = update.message.text.strip()
    acc_id = context.user_data.get('edit_acc_id')
    field = context.user_data.get('edit_field')
    session = Session()
    try:
        acc = session.query(Account).filter_by(id=acc_id).first()
        if not acc:
            await update.message.reply_text("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard(user_id))
            return ConversationHandler.END
        # –í–∞–ª–∏–¥–∞—Ü–∏—è MMR
        if field == "mmr" or field == "behavior":
            if not value.isdigit():
                await update.message.reply_text(f"{get_field_display_name(field)} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return ADMIN_EDIT_NEW_VALUE
            setattr(acc, field, int(value))

        elif field == "calibration":
            if value.lower() in ["–¥–∞", "yes", "true", "1"]:
                acc.calibration = True
            elif value.lower() in ["–Ω–µ—Ç", "no", "false", "0"]:
                acc.calibration = False
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:")
                return ADMIN_EDIT_NEW_VALUE
        else:
            setattr(acc, field, value)
        session.commit()
        await update.message.reply_text("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_menu_keyboard(user_id))
    finally:
        session.close()
    return ConversationHandler.END

async def admin_edit_cancel(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if update.message:  # –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard(user_id))
    elif update.callback_query:  # –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard(user_id))

    return ConversationHandler.END

async def admin_delete_cancel(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if update.message:
        await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard(user_id))
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard(user_id))

    return ConversationHandler.END

async def admin_delete_start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return ConversationHandler.END
    session = Session()
    try:
        accounts = session.query(Account).all()
        if not accounts:
            await update.callback_query.edit_message_text("–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=main_menu_keyboard(user_id))
            return ConversationHandler.END

        buttons = [
            [InlineKeyboardButton(f"ID {acc.id} MMR {acc.mmr} –°—Ç–∞—Ç—É—Å {acc.status}", callback_data=f"delete_acc_{acc.id}")]
            for acc in accounts
        ]
        buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_back")])
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(buttons))
    finally:
        session.close()
    return ADMIN_DELETE_CHOOSE_ID

async def admin_delete_choose_account(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    logging.info(f"admin_delete_choose_id called with data: {user_id}")
    if not is_admin(user_id):
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return ConversationHandler.END

    acc_id = int(query.data.split("_")[-1])
    session = Session()
    try:
        acc = session.query(Account).filter_by(id=acc_id).first()
        if not acc:
            await query.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return ConversationHandler.END
        session.delete(acc)
        session.commit()
        await query.edit_message_text(f"–ê–∫–∫–∞—É–Ω—Ç ID {acc_id} —É–¥–∞–ª—ë–Ω.", reply_markup=main_menu_keyboard(user_id))
    finally:
        session.close()
    return ConversationHandler.END

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ---
def auto_return_accounts():
    session = Session()
    try:
        now = datetime.now(timezone.utc)
        rented = session.query(Account).filter(Account.status == "rented").all()
        for acc in rented:
            if acc.rented_at and acc.rent_duration:
                rented_at = acc.rented_at
                if rented_at.tzinfo is None:
                    rented_at = rented_at.replace(tzinfo=timezone.utc)

                end_time = rented_at + timedelta(minutes=acc.rent_duration)
                if now >= end_time:
                    acc.status = "free"
                    acc.renter_id = None
                    acc.rented_at = None
                    acc.rent_duration = None
                    logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ID {acc.id}")
        session.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}", exc_info=True)
    finally:
        session.close()

scheduler.add_job(auto_return_accounts, 'interval', minutes=1)




# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    app.add_handler(CallbackQueryHandler(
        admin_approve_reject_handler,
        pattern=r"^(approve_user_\d+|reject_user_\d+|delete_user_\d+|show_pending_users|show_all_users|admin_back)$"
    ))

    app.add_handler(CallbackQueryHandler(list_accounts, pattern="^list$"))
    app.add_handler(CallbackQueryHandler(my, pattern="^my$"))
    app.add_handler(CallbackQueryHandler(whoami, pattern="^whoami$"))
    return_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(return_account, pattern="^return$")],
        states={
            RETURN_CONFIRM_UPDATE: [CallbackQueryHandler(return_confirm_handler, pattern="^return_update_(yes|no)$")],
            RETURN_SELECT_FIELDS: [CallbackQueryHandler(return_select_fields, pattern="^update_(mmr|behavior|both)$")],
            RETURN_INPUT_MMR: [MessageHandler(filters.TEXT & ~filters.COMMAND, return_input_mmr)],
            RETURN_INPUT_BEHAVIOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, return_input_behavior)],
        },
        fallbacks=[],
    )
    app.add_handler(return_conv)

    rent_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(rent_start, pattern="^rent_start$")],
        states={
            USER_RENT_SELECT_ACCOUNT: [CallbackQueryHandler(rent_select_account, pattern="^rent_acc_\\d+$")],
            USER_RENT_SELECT_DURATION: [CallbackQueryHandler(rent_select_duration, pattern="^rent_dur_\\d+$|^cancel_rent$")],
        },
        fallbacks=[CallbackQueryHandler(cancel_rent, pattern="^cancel_rent$")],
        allow_reentry=True
    )
    app.add_handler(rent_conv)

    add_acc_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_add_start, pattern="^admin_add_start$")],
        states={
            ADMIN_ADD_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_login_handler)],
            ADMIN_ADD_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_password_handler)],
            ADMIN_ADD_BEHAVIOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_behavior_handler)],
            ADMIN_ADD_CALIBRATION: [CallbackQueryHandler(admin_add_calibration_handler, pattern="^calibration_(yes|no)$")],
            ADMIN_ADD_MMR: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_mmr_handler)],
        },
        fallbacks=[CommandHandler("cancel", admin_add_cancel)],
        allow_reentry=True
    )
    app.add_handler(add_acc_conv)

    edit_acc_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_edit_start, pattern="^admin_edit_start$")],
        states={
            ADMIN_EDIT_CHOOSE_ID: [
                CallbackQueryHandler(admin_edit_choose_id, pattern="^edit_acc_\\d+$"),

            ],
            ADMIN_EDIT_CHOOSE_FIELD: [
                CallbackQueryHandler(admin_edit_choose_field, pattern="^edit_field_\\w+$")
            ],
            ADMIN_EDIT_NEW_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_edit_new_value)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', admin_edit_cancel),
            CallbackQueryHandler(admin_edit_cancel, pattern="^admin_back$"),
        ],
        allow_reentry=True
    )

    app.add_handler(edit_acc_conv)
    delete_acc_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_delete_start, pattern="^admin_delete_start$")],
        states={
            ADMIN_DELETE_CHOOSE_ID: [
                CallbackQueryHandler(admin_delete_choose_account, pattern="^delete_acc_\\d+$")
            ]
        },
        fallbacks=[
            CommandHandler('cancel', admin_delete_cancel),
            CallbackQueryHandler(admin_delete_cancel, pattern="^admin_back$"),
        ],
        allow_reentry=True
    )
    app.add_handler(delete_acc_conv)
    app.add_handler(CallbackQueryHandler(show_all_users_handler, pattern="^show_all_users$"))
    app.add_handler(CallbackQueryHandler(lambda update, context: update.callback_query.answer(), pattern="^ignore_"))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    app.run_polling()

if __name__ == '__main__':
    main()
